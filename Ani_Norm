% This is a test for the help section of this code
%
%
%
% TEST

function [out] = Ani_Norm(in)
close all
%this will close all figure windows open

if size(in,2) <4
    disp('Unexpected size or format for input matrix');
    return
end
%this verifies that the inputs are of valid sizes
    
len = length(in);
% collect lenght of input file

x = zeros(len,1);
ani = zeros(len,1);
counts = zeros(len,1);
% create dummy matrices for our useful variables that will soon be
% populated

for i = 1:len
       x(i,1) = in(i,4);
       ani(i,1) = in(i,3);
       counts(i,1) = in(i,2);
end

figure;
plot(x,counts,x,ani)
title('Plot of SEVI Spectra and Anisotropy')
xlabel('eBE (cm-1)')
ylabel('Counts')
legend('Electron Signal Counts','Anisotropy Counts')


prompt1 = '\nPlease enter the number of peaks you would like to fit.\n';
str1 = input(prompt1);
if str1 < 1
    return
else
    out = Gaussfitting(x,counts,ani,str1);
end
    %here we run the subfunction defined below for the number of peaks
    %specified by the prompt above




% must figure out what to do with regards to integration of anisotropy 
% output normalized area (should be easiest part)

%% Gaussian Fitting of data

function out = Gaussfitting(x,y1,y2,num)
fprintf('\n\nUse the mouse to select the bounds over which the program will fit your data with a Gaussian.\nPlease select traces in the order they appear in the legend (top to bottom)\nand please click form LEFT to RIGHT.\nIt may help to maximize the plot on your screen.\n')

[xx,yy] = ginput(2.*num);
%this creates two vectors (xx and yy) that correspond to the x and y
%coordinates selected by the user on Figure 2 using their mouse.

coeffs = zeros(3,num);
%here, we create the vectors that will be populated in the for loop below.
%It is important to create these beforehand to improve the speed of the
%program, particularly if you will be iterating through many data sets.

figure;

for i = 1:num
    x_min_index = 2.*i-1;
    x_max_index = 2.*i;
    domain1 = [xx(x_min_index),xx(x_max_index)];
    outliers = excludedata(x,y1,'domain',domain1);
    test1 = fit(x,y1,'gauss1','Exclude', outliers);
    coeff = coeffvalues(test1)';
    a1 = coeff(1);
    b1 = coeff(2);
    c1 = coeff(3)./sqrt(2);
    coeffs(1,i) = a1;
    coeffs(2,i) = b1;
    coeffs(3,i) = c1; 
    hold on
    thisplot = plot(test1,x,y1);
    set(thisplot, 'Linewidth',2)
   % set(thisplot,'color', 'k')
    xlabel('eBE (cm-1)','FontSize',15)
    ylabel('Counts','FontSize',15)
    tit2 = sprintf('Plot and Fit of Data');
    title(tit2,'FontSize',15) 
    legend off
    plot(x,y2)
    hold off
    lbound(i) = coeffs(2,i) - 3.*coeffs(3,i);
    rbound(i) = coeffs(2,i) + 3.*coeffs(3,i);
    vline(lbound(i),'k');
    rline = vline(rbound(i),'g');
    set(rline, 'Color',[0,0.6,0])
    strng = {'lbound of integral = black', 'rbound of integral = green'};
    dim = [.2 .5 .3 .3];
    annotation('textbox',dim,'String',strng,'FitBoxToText','on');
end

fprintf('The next displays will repeat until you are satisfied with your fittings.\n')

prompta = '\nWould you like to re-select the x-boundries for your Gaussian fitting?\n If so, enter the number of the peak (from left to right) you would like to correct.\n If not, type the number zero, "0".\n';
whil_index = input(prompta);
while whil_index >= 1 
    colnum = whil_index;
    disp(figure(1))
    [xx(2.*colnum -1),yy(2.*colnum-1)] = ginput(1);
    [xx(2.*colnum),yy(2.*colnum)] = ginput(1);
    x_min_index = 2.*i-1;
    x_max_index = 2.*i;
    domain1 = [xx(x_min_index),xx(x_max_index)];
    outliers = excludedata(x,y1,'domain',domain1);
    test1 = fit(x,y1,'gauss1','Exclude', outliers);
    aaa = coeffvalues(test1)';
    aa = aaa(1);
    bb = aaa(2);
    cc = aaa(3);
    coeffs(1,colnum) = aa;
    coeffs(2,colnum) = bb;
    coeffs(3,colnum) = cc./sqrt(2);
    figure(2);
    hold on
    plot(test1,x,y1)
    legend off
    hold off  
prompta = '\nWould you like to re-select the x-boundries for your Gaussian fitting?\n If so, enter the number of the FIGURE you would like to correct.\n If not, type zero.\n';
whil_index = input(prompta);
end

if whil_index == 0
    gaus = @(x) coeff(1,i).*exp(-((x-coeffs(2,i))./coeffs(3,i)).^2);
    inti(i) = integral(gaus,lbound(i),rbound(i));
else
    for i = 1:num
    figure(2)
    lbound(i) = coeffs(2,i) - 3.*coeffs(3,i);
    rbound(i) = coeffs(2,i) + 3.*coeffs(3,i);
    vline(lbound(i),'k');
    rline = vline(rbound(i),'g');
    set(rline, 'Color',[0,0.6,0])
    strng = {'lbound of integral = black', 'rbound of integral = green'};
    dim = [.2 .5 .3 .3];
    annotation('textbox',dim,'String',strng,'FitBoxToText','on');
    hold on
    plot(x,y2)
    hold off
    gaus = @(x) coeff(1,i).*exp(-((x-coeffs(2,i))./coeffs(3,i)).^2);
    inti(i) = integral(gaus,lbound(i),rbound(i));
%    x_ani_inti = 
%    y_ani_inti =    
%    ani_inti(i) = trapz(x_ani_inti,y_ani_inti);

% NEED TO CREATE BOUNDS OVER WHICH TO INTEGRATE, AND ALSO DEVISE AN
% INTERPOLATION FUNCTION, OR JUST LEAVE THIS UP TO MYSELF IN ORIGIN
    end
end



% beta = inti./ani_inti
out = inti %beta;

%% Using a verticle line plotting tool I found online that was the best I found, copied from their original file including their comments
function hhh=vline(x,in1,in2)
% function h=vline(x, linetype, label)
% 
% Draws a vertical line on the current axes at the location specified by 'x'.  Optional arguments are
% 'linetype' (default is 'r:') and 'label', which applies a text label to the graph near the line.  The
% label appears in the same color as the line.
%
% The line is held on the current axes, and after plotting the line, the function returns the axes to
% its prior hold state.
%
% The HandleVisibility property of the line object is set to "off", so not only does it not appear on
% legends, but it is not findable by using findobj.  Specifying an output argument causes the function to
% return a handle to the line, so it can be manipulated or deleted.  Also, the HandleVisibility can be 
% overridden by setting the root's ShowHiddenHandles property to on.
%
% h = vline(42,'g','The Answer')
%
% returns a handle to a green vertical line on the current axes at x=42, and creates a text object on
% the current axes, close to the line, which reads "The Answer".
%
% vline also supports vector inputs to draw multiple lines at once.  For example,
%
% vline([4 8 12],{'g','r','b'},{'l1','lab2','LABELC'})
%
% draws three lines with the appropriate labels and colors.
% 
% By Brandon Kuczenski for Kensington Labs.
% brandon_kuczenski@kensingtonlabs.com
% 8 November 2001

if length(x)>1  % vector input
    for I=1:length(x)
        switch nargin
        case 1
            linetype='r:';
            label='';
        case 2
            if ~iscell(in1)
                in1={in1};
            end
            if I>length(in1)
                linetype=in1{end};
            else
                linetype=in1{I};
            end
            label='';
        case 3
            if ~iscell(in1)
                in1={in1};
            end
            if ~iscell(in2)
                in2={in2};
            end
            if I>length(in1)
                linetype=in1{end};
            else
                linetype=in1{I};
            end
            if I>length(in2)
                label=in2{end};
            else
                label=in2{I};
            end
        end
        h(I)=vline(x(I),linetype,label);
    end
else
    switch nargin
    case 1
        linetype='r:';
        label='';
    case 2
        linetype=in1;
        label='';
    case 3
        linetype=in1;
        label=in2;
    end
    g=ishold(gca);
    hold on
    y=get(gca,'ylim');
    h=plot([x x],y,linetype);
    if length(label)
        xx=get(gca,'xlim');
        xrange=xx(2)-xx(1);
        xunit=(x-xx(1))/xrange;
        if xunit<0.8
            text(x+0.01*xrange,y(1)+0.1*(y(2)-y(1)),label,'color',get(h,'color'))
        else
            text(x-.05*xrange,y(1)+0.1*(y(2)-y(1)),label,'color',get(h,'color'))
        end
    end     
    if g==0
        hold off
    end
    set(h,'tag','vline','handlevisibility','off')
end % else
if nargout
    hhh=h;
end
